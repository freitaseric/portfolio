---
import axios from "axios";
import type { Repository } from "../types/github";

let data: Repository[] | null = null;
let error: string | null = null;

try {
  const response = await axios.get<Repository[]>(
    `https://api.github.com/user/repos?visibility=all&affiliation=owner`,
    {
      headers: {
        Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
      },
    }
  );

  const repositoriesWithLanguages = await Promise.all(
    response.data.map(async (repo) => {
      try {
        const languagesResponse = await axios.get<Record<string, number>>(
          `https://api.github.com/repos/${repo.owner.login}/${repo.name}/languages`,
          {
            headers: {
              Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
            },
          }
        );

        return {
          ...repo,
          languages: languagesResponse.data,
        };
      } catch (error) {
        return {
          ...repo,
        };
      }
    })
  );

  data = repositoriesWithLanguages.filter(
    (repo) => repo.languages && repo.languages.length > 0
  );
} catch (err) {
  error = `${err}`;
}
---

{
  error ? (
    <div role="alert" class="alert alert-error">
      <i class="fa-solid fa-circle-xmark" />
      <span>{error}</span>
    </div>
  ) : (
    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
      {data
        ?.sort((a, b) => b.stars - a.stars)
        .slice(0, 6)
        .map((repo) => (
          <div class="card bg-base-100 w-96 shadow-sm">
            <div class="card-body">
              <h2 class="card-title">
                {repo.name}
                {repo.private ? (
                  <div class="badge badge-soft badge-accent">
                    <i class="fa-solid fa-lock" />
                  </div>
                ) : (
                  <div class="badge badge-soft">
                    <i class="fa-solid fa-lock-open" />
                  </div>
                )}
              </h2>
              <p>{repo.description}</p>
              <div class="flex flex-row justify-center-safe gap-2">
                {repo.languages &&
                  repo.languages.length <= 3 &&
                  Object.keys(repo.languages).map((language) => (
                    <div class="badge badge-soft badge-success">{language}</div>
                  ))}
                {repo.languages && repo.languages.length > 3 && (
                  <div class="dropdown dropdown-hover">
                    <div tabindex="0" role="button" class="btn m-1">
                      Languages
                    </div>
                    <ul
                      tabindex="0"
                      class="dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm"
                    >
                      {Object.keys(repo.languages).map((language) => (
                        <div class="badge badge-soft badge-success">
                          {language}
                        </div>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
              <div class="card-actions justify-end">
                {!repo.private && (
                  <a href={repo.html_url} class="btn btn-info">
                    Source
                  </a>
                )}
                {!repo.private && repo.homepage && (
                  <a href={repo.homepage} class="btn btn-info btn-soft">
                    Website
                  </a>
                )}
              </div>
            </div>
          </div>
        ))}
    </div>
  )
}
